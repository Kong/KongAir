// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/Kong/KongAir/flight-data/routes/api/models"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Health check endpoint for Kubernetes
	// (GET /health)
	GetHealth(ctx echo.Context) error
	// Request all the KongAir routes
	// (GET /routes)
	GetRoutes(ctx echo.Context, params GetRoutesParams) error
	// Request a specific KongAir route by id (LHR-SIN)
	// (GET /routes/{id})
	GetRoute(ctx echo.Context, id string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetHealth converts echo context to params.
func (w *ServerInterfaceWrapper) GetHealth(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetHealth(ctx)
	return err
}

// GetRoutes converts echo context to params.
func (w *ServerInterfaceWrapper) GetRoutes(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRoutesParams
	// ------------- Optional query parameter "origin" -------------

	err = runtime.BindQueryParameter("form", true, false, "origin", ctx.QueryParams(), &params.Origin)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter origin: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRoutes(ctx, params)
	return err
}

// GetRoute converts echo context to params.
func (w *ServerInterfaceWrapper) GetRoute(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRoute(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/health", wrapper.GetHealth)
	router.GET(baseURL+"/routes", wrapper.GetRoutes)
	router.GET(baseURL+"/routes/:id", wrapper.GetRoute)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/6yV32/bNhDH/xXitocNUCxv6/qgtwDdViPDOiSPkTEw0km6ViKZ48mdEfh/H0hKsZ0o",
	"a7f2ybJI3o/v98PTA1R2cNagEQ/FA/iqw0HHx2s7CoYHx9YhC2F8rXftX/XIWsia8F/2DqEAMoItMhwy",
	"qNELmacbvDCZNqxTvfjaMrW0dOKQAeP9SIw1FLfh+OPm82TZeXHbbI5k795jJXAIocg0NiSp0VdMLlUJ",
	"V9a0l8QqNu2VR95Rhcqx3VGNXkmHirElL8hYK07b5lNNT+jVHcpHRKNSbUqbWp1UpzSxsyweMhCSPtQ1",
	"ZbtJ2SCDHbJPBa1XP6zWURaHRjuCAn5arVdryMBp6aIVeYe6ly48tijPm/rF1M6SESWdFsUoI5vUytxf",
	"CqC8aBn9CmK2pN6mhgJ+Q3mbUgQLvLPGJwh+XK/DT2WNoImZtXM9VfFo/t4n5xNMzxFK6cIT/q0HF6V4",
	"dwXZgvELBp73OGmnyE/N7INoP3/1+kYzh//SMo+RwjY/DoPmPRSQlFZVh9UHhbN1jWV1Nd4hGxT08Uie",
	"6HvR9uvJaN33idtzWMmramRGI/3+lGmxqun3q9JcplsQNmrlNIUuPxNuVdka/ao0Sygl2iPArAcUZA/F",
	"7dPqG+oFWd3t1eMdD1MB7kfkIL7RQ5R6XjyaSIKDXxwt0wvNrCMeXvbR1MbyAIft/4J7QiOe6Du+8Gms",
	"7HQ/htC3D6VRSpVAdQmFKuH3t9cXN7++KyGbFlIHj4vHhRNd0+rZsdMRF5Zfv16XRh22pUk8PZfjW8YG",
	"CvgmP476fJrzeRryzyRaAHisKvS+GXs1i6U+knRPJ+Nk8jna13g/opdHImcUeSZCdBtYgKantpOLWouG",
	"7Qnr+QPVh08Dr7zDihqqUmTVsB2UVi3t0ExQb978C5yfYvMmEjUF37yZ0QwD+Uhm/D4dP1jCI57a8nR4",
	"bL9wtH6Gu//RzcaOZjIykPFq/WpB8iiBsZJ2v+T30ZAzy8Ptplp9F+/E5o/vXyYghEXeLdsxx7z8cxO/",
	"ociQwcg9FNCJOF/kuXa0+mBNe6GJV5UNt/3wTwAAAP//LEHLL/QIAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
