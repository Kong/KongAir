name: Stage changes for Kong

on:
  push:
    branches:
      - main
      - workflow/**
      - contract-test
    paths-ignore:
      - 'PRD/**'
      - 'platform/kong/.generated/kong.yaml'
  workflow_dispatch:

jobs:

#  this job is useful to debug workflows, see https://github.com/mheap/debug-artifact
#  debug-artifacts:
#    name: Upload Debug Artifacts
#    runs-on: ubuntu-latest
#    steps:
#      - name: Upload Debug Artifacts
#        uses: mheap/debug-artifact@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  has-changes:
    name: Have specs, configurations, or pipeline files changed
    runs-on: ubuntu-latest

    outputs:
      are-changes: ${{ steps.changed-files.outputs.files }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: dorny/paths-filter@v2
        id: changed-files
        with:
          filters: |
            files:
              - '.github/workflows/stage-changes-for-kong.yaml'
              - 'flight-data/flights/openapi.yaml'
              - 'flight-data/flights/kong/**'
              - 'flight-data/routes/openapi.yaml'
              - 'flight-data/routes/kong/**'
              - 'sales/bookings/opeanapi.yaml'
              - 'sales/bookings/kong/**'
              - 'sales/customer/opeanapi.yaml'
              - 'sales/customer/kong/**'
              - 'experience/kong/**'
              - 'platform/kong/**'
        
  oas-break:
    name: Check breaking changes
    
    needs: has-changes
    if: ${{ needs.has-changes.outputs.are-changes == 'true' }}

    runs-on: ubuntu-latest
    strategy:
      matrix:
        app:
          - dir: flight-data
            name: flights
            port: 8080
          - dir: flight-data
            name: routes
            port: 8081
          - dir: sales
            name: bookings
            port: 8082
          - dir: sales
            name: customer
            port: 8083
          
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      # The base OAS file is the version of the OAS file from the previous commit
      - name: Base OAS
        run: |
          git show HEAD~1:${{ matrix.app.dir }}/${{ matrix.app.name }}/openapi.yaml > ${{ matrix.app.dir }}/${{ matrix.app.name }}/base.yaml
      # Check breaking changes in the OAS and create an issue if there are any
      - name: Check OAS breaking changes
        uses: oasdiff/oasdiff-action/breaking@main
        id: oasdiff  # Static ID
        with:
          base: ${{ matrix.app.dir }}/${{ matrix.app.name }}/base.yaml
          revision: ${{ matrix.app.dir }}/${{ matrix.app.name }}/openapi.yaml
      - name: Create Issue on Breaking Change
        if: steps.oasdiff.outputs.breaking != 'No breaking changes'
        uses: JasonEtco/create-an-issue@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          APP_NAME: ${{ matrix.app.name }}
          BREAKING_CHANGES: ${{ steps.oasdiff.outputs.breaking }}
        with:
          filename: .github/ISSUE_TEMPLATE/breaking-change.md
      
  contract-test:
    name: Contract testing
    needs: has-changes
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      # Start the API implementation services and execute contract testing
      # If you have a schemathesis token, you can uncomment the token line and use it
      - name: Start services
        run: chmod +x run-all.sh && ./run-all.sh
      - name: Contract testing flights
        uses: schemathesis/action@v1
        with:
          schema: flight-data/flights/openapi.yaml
          base-url: http://localhost:8080
          #token: ${{ secrets.SCHEMATHESIS_TOKEN }}
      - name: Contract testing routes
        uses: schemathesis/action@v1
        with:
          schema: flight-data/routes/openapi.yaml
          base-url: http://localhost:8081
          #token: ${{ secrets.SCHEMATHESIS_TOKEN }}
      - name: Contract testing bookings
        uses: schemathesis/action@v1
        with:
          schema: sales/bookings/openapi.yaml
          base-url: http://localhost:8082
          args: '-H "x-consumer-username: dfreese"'
          #token: ${{ secrets.SCHEMATHESIS_TOKEN }}
      - name: Contract testing customer
        uses: schemathesis/action@v1
        with:
          schema: sales/customer/openapi.yaml
          base-url: http://localhost:8083
          args: '-H "x-consumer-username: jsmith"'
          #token: ${{ secrets.SCHEMATHESIS_TOKEN }}

  security-test:
    name: Security testing
    runs-on: ubuntu-latest
    needs: has-changes
    strategy:
      matrix:
        app:
          - dir: flight-data
            name: flights
          - dir: flight-data
            name: routes
          - dir: sales
            name: bookings
          - dir: sales
            name: customer
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Start services
        run: chmod +x run-all.sh && ./run-all.sh
      - name: ZAP Scan
        uses: zaproxy/action-api-scan@v0.7.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          docker_name: 'ghcr.io/zaproxy/zaproxy:stable'
          format: openapi
          target: '${{ matrix.app.dir }}/${{ matrix.app.name }}/openapi.yaml'

  load-test:
    name: Load testing
    runs-on: ubuntu-latest
    needs: has-changes
    strategy:
      matrix:
        app:
          - dir: flight-data
            name: flights
          - dir: flight-data
            name: routes
          - dir: sales
            name: bookings
          - dir: sales
            name: customer
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Generate K6 script from openapi
        uses: hatamiarash7/openapi-generator@v0.3.0
        with:
          openapi-file: '${{ matrix.app.dir }}/${{ matrix.app.name }}/openapi.yaml'
          generator: 'k6'
          output-dir: '${{ matrix.app.dir }}/${{ matrix.app.name }}/k6'
      - name: Start services
        run: chmod +x run-all.sh && ./run-all.sh
      - name: Install k6
        run: |
          curl https://github.com/grafana/k6/releases/download/v0.52.0/k6-v0.52.0-linux-amd64.tar.gz -L | tar xvz --strip-components 1
      - name: Install packages
        run: |
          npm install
      - name: Start server and run tests
        run: |
          npm start & npx wait-on http://localhost:3000
          ./k6 run test.js --vus 10 --duration 10s

  oas-to-kong:
    name: Convert OAS to Kong configurations
    needs: [has-changes, oas-break, contract-test]
    if: ${{ needs.has-changes.outputs.are-changes == 'true' }}
    runs-on: ubuntu-latest
    outputs:
      pull-request-number: ${{ steps.create_pr.outputs.pull-request-number }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup deck
        uses: kong/setup-deck@v1
        with:
          deck-version: '1.38.0'
          wrapper: false

      - name: Convert Flights API to Kong
        # In multiple steps, convert the OpenAPI Spec to a Kong declarative configuration
        #   and then patch the result with the data in the kong/patches.yaml
        #   and apply some tags
        run: |
          deck file openapi2kong -s flight-data/flights/openapi.yaml | \
            deck file patch flight-data/flights/kong/patches.yaml | \
            deck file add-tags -o .github/artifacts/kong/flight-data-flights-kong.yaml \
              --selector "$.services[*]" --selector "$.services[*].routes[*]" flight-data


      - name: Convert Routes API to Kong
        # In two steps, convert the OpenAPI Spec to a Kong declarative configuration
        #   and then patch the result with the data in the kong/patches.yaml
        run: |
          deck file openapi2kong -s flight-data/routes/openapi.yaml | \
            deck file patch flight-data/routes/kong/patches.yaml | \
            deck file add-tags -o .github/artifacts/kong/flight-data-routes-kong.yaml \
              --selector "$.services[*]" --selector "$.services[*].routes[*]" flight-data

      - name: Convert Bookings API to Kong
        # In two steps, convert the OpenAPI Spec to a Kong declarative configuration
        #   and then patch the result with the data in the kong/patches.yaml
        run: |
          deck file openapi2kong -s sales/bookings/openapi.yaml | \
            deck file patch  sales/bookings/kong/patches.yaml | \
            deck file add-tags -o .github/artifacts/kong/sales-bookings-kong.yaml \
              --selector "$.services[*]" --selector "$.services[*].routes[*]" sales

      - name: Convert Customers API to Kong
        # In two steps, convert the OpenAPI Spec to a Kong declarative configuration
        #   and then patch the result with the data in the kong/patches.yaml
        run: |
          deck file openapi2kong -s sales/customer/openapi.yaml | \
            deck file patch sales/customer/kong/patches.yaml | \
            deck file add-tags -o .github/artifacts/kong/sales-customer-kong.yaml --selector "$.services[*]" \
              --selector "$.services[*].routes[*]" sales

      - name: Combine Kong Configurations
        # Combine all the previous OAS->Kong configurations into one and put it in a well known place
        run: |
          deck file merge \
            .github/artifacts/kong/*-kong.yaml -o .github/artifacts/kong/kong-combined.yaml

      - name: Merge Experience API Configurations
        run: |
          deck file merge \
            .github/artifacts/kong/kong-combined.yaml experience/kong/experience-service.yaml \
            -o .github/artifacts/kong/kong-combined.yaml

      - name: Platform Team Kong Additions
        # The platform team has their own things to add to the final Kong configuration.
        # The platform-kong-base.yaml is a base file for any platform defaults. It will "win" over
        #   any settings in the domain teams Kong configurations.
        # Then the platform adds in some objects like plugins, consumers, vaults, etc..
        # Also the platform/kong/patches.yaml is used to patch anything from the upstream
        #   team configurations
        # And finally a tag is added to everything managed in this process to allow
        #   the deck tool to isolate what is managed here from entities that may be managed
        #   elsewhere or by other tools
        # The platform/kong/.generated/kong.yaml is the final product and is stored in the repository.
        #   Storing the generated file in the repo is intentional,
        #   it should help with PR reviews, transparency, and debugging.
        run: |
          deck file merge \
            .github/artifacts/kong/kong-combined.yaml \
            platform/kong/platform-kong-base.yaml     \
            platform/kong/consumers/*                 \
            platform/kong/plugins/*                   \
            platform/kong/vaults/* |                  \
          deck file patch \
            platform/kong/patches.yaml |
          deck file add-tags \
            -o platform/kong/.generated/kong.yaml \
            "platform-repo-managed"

      - name: Upload Artifacts
        # Artifacts are the files that are built along the way of the pipeline but are not committed to the repo
        uses: actions/upload-artifact@v3
        with:
          name: kong-configurations
          path: .github/artifacts/kong/*.yaml

      - name: Create PR for changed Kong Gateway Configuration
        id: create_pr
        # The only file that should be changed for this PR is platform/kong/.generated/kong.yaml
        uses: peter-evans/create-pull-request@v5
        with:
          title: Stage Kong Gateway Configuration
      
  oas-changelog:
    # obtain the changelog between the previous and current OAS for all services
    # and create a PR comment with the changelog
    needs: oas-to-kong
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app:
          - dir: flight-data
            name: flights
          - dir: flight-data
            name: routes
          - dir: sales
            name: bookings
          - dir: sales
            name: customer
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      # The base OAS file is the version of the OAS file from the previous commit
      - name: Base OAS
        run: |
          git show HEAD~1:${{ matrix.app.dir }}/${{ matrix.app.name }}/openapi.yaml > ${{ matrix.app.dir }}/${{ matrix.app.name }}/base.yaml
      - name: Obtain Changelog OAS
        id: oaschangelog
        uses: oasdiff/oasdiff-action/changelog@main
        with:
          base: ${{ matrix.app.dir }}/${{ matrix.app.name }}/base.yaml
          revision: ${{ matrix.app.dir }}/${{ matrix.app.name }}/openapi.yaml
          output-to-file: ${{ matrix.app.dir }}/${{ matrix.app.name }}/changelog.txt
      - name: Create PR Comment with Changelog
        id: create_comment
        if: steps.oaschangelog.outputs.changelog != 'No changelog changes'
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ needs.oas-to-kong.outputs.pull-request-number }}
          body-path: ${{ matrix.app.dir }}/${{ matrix.app.name }}/changelog.txt
      
